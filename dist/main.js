(()=>{"use strict";var __webpack_modules__={384:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  p: () => (/* binding */ attackEnemy)\n});\n\n;// ./src/ship.js\nclass Ship {\n    #length\n    #hits = 0\n    constructor(length) {\n        this.#length = length\n    }\n\n    get length() {\n        return this.#length\n    }\n\n    get hits() {\n        return this.#hits\n    }\n\n    hit = () => this.#hits++\n\n    isSunk = () => this.#hits === this.#length\n}\n;// ./src/pubsub.js\nclass PubSub {\n    #events = {};\n\n    on(eventName, fn) {\n        this.#events[eventName] = this.#events[eventName] || [];\n        this.#events[eventName].push(fn);\n    }\n\n    off(eventName, fn) {\n        if (this.#events[eventName]) {\n            for (let i = 0; i < this.#events[eventName].length; i++) {\n                if (this.#events[eventName][i] === fn) {\n                    this.#events[eventName].splice(i, 1);\n                    break;\n                }\n            };\n        };\n    }\n\n    emit(eventName, data) {\n        if (this.#events[eventName]) {\n            this.#events[eventName].forEach((fn) => {\n                fn(data);\n            });\n        }\n    }\n\n    get list() {\n        return this.#events;\n    }\n};\n\nconst Events = new PubSub;\n;// ./src/game.js\n\n\n\nclass Gameboard {\n    #board = []\n    #attacked = new Map()\n    #sunkShips = []\n    #shipLocations = []\n\n    constructor(name) {\n        const ROWS = 10\n        const COLUMNS = 10\n        this.ships = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1]\n        this.name = name\n\n        for (let i = 0; i < ROWS; i++) {\n        this.#board[i] = [];\n        for (let j = 0; j < COLUMNS; j++) {\n            this.#board[i].push(new Cell());\n        }}\n    }\n\n    get cells() {\n        return this.#board\n    }\n\n    get attackedCells() {\n        return this.#attacked\n    }\n\n    get sunkShips() {\n        return this.#sunkShips\n    }\n\n    printBoard = () => {\n        this.#board.forEach(row => {\n            let output = ''\n            row.forEach(cell => output += cell.value)\n            console.log(output)\n        })\n    }\n\n    placeShip = ([x, y], index, length, orientation) => {\n        if (orientation === 'x') {\n            for (let i = 0; i < length; i++) {\n                this.populate([x + i, y], index)\n                this.populate([x + i, y - 1], '=')\n                this.populate([x + i, y + 1], '=')\n                for (let j = -1; j < 2; j++) {\n                    this.populate([x - 1, y + j], '=')\n                    this.populate([x + length, y + j], '=')\n                }\n            }\n        } else {\n            for (let i = 0; i < length; i++) {\n                this.populate([x, y + i], index)\n                this.populate([x - 1, y + i], '=')\n                this.populate([x + 1, y + i], '=')\n                for (let j = -1; j < 2; j++) {\n                    this.populate([x + j, y - 1], '=')\n                    this.populate([x + j, y + length], '=')\n                }\n            }\n        }\n    }\n\n    isOnBoard = (x, y) => x >= 0 && x < 10 && y >= 0 && y < 10\n\n    isShip = (x, y) => Number.isInteger(this.getValue(x, y))\n\n    populate = ([x, y], value) => {\n        if (this.isOnBoard(x, y) && !this.isShip(x, y)) this.#board[y][x].value = value\n    } \n\n    getValue = (x, y) => this.#board[y][x].value\n\n    isValidPosition([x, y], length, orientation) {\n        for (let i = 0; i < length; i++) {\n            if (orientation === 'x') {\n                if (this.getValue(x + i, y) !== '_') return false\n            } else {\n                if (this.getValue(x, y + i) !== '_') return false\n            }\n        }\n        return true\n    }\n\n    generateShips = () => {\n        this.ships.forEach((length, index) => {\n            let ship = new Ship(length)\n            this.ships[index] = ship\n\n            let x, y, orientation\n            while (true) {\n                x = this.getRandomInt(11 - length)\n                y = this.getRandomInt(11 - length)\n                orientation = (this.getRandomInt(2) === 0) ? 'x' : 'y' \n                if (this.isValidPosition([x, y], length, orientation)) {\n                    this.placeShip([x, y], index, length, orientation)\n                    this.#shipLocations[index] = { x, y, length, orientation }\n                    break\n                }\n            }\n            // this.printBoard()\n            // console.log()\n        })\n    }\n\n    getRandomInt = (max) => Math.floor(Math.random() * max)\n\n    receiveAttack = (x, y) => {\n        let hash = x + y * 10\n        if (this.#attacked.has(hash)) return\n        this.#attacked.set(parseInt(hash), this.getValue(x, y))\n        if (this.isShip(x, y)) {\n            let attackedShip = this.getShip(x, y)\n            attackedShip.hit()\n            if (attackedShip.isSunk()) {\n                this.#sunkShips.push(attackedShip)\n                this.clearNeighbourCells(this.getValue(x, y))\n            }\n        }\n    }\n\n    clearNeighbourCells = (index) => {\n        let { x, y, length, orientation } = this.#shipLocations[index]\n        if (orientation === 'x') {\n            for (let i = 0; i < length; i++) {\n                this.clear(x + i, y - 1)\n                this.clear(x + i, y + 1)\n                for (let j = -1; j < 2; j++) {\n                    this.clear(x - 1, y + j)\n                    this.clear(x + length, y + j)\n                }\n            }\n        } else {\n            for (let i = 0; i < length; i++) {\n                this.clear(x - 1, y + i)\n                this.clear(x + 1, y + i)\n                for (let j = -1; j < 2; j++) {\n                    this.clear(x + j, y - 1)\n                    this.clear(x + j, y + length)\n                }\n            }\n        }\n    }\n\n    getShip = (x, y) => this.ships[this.getValue(x, y)]\n    \n    clear = (x, y) => {\n        let hash = x + y * 10\n        if (this.isOnBoard(x, y) && !this.#attacked.has(hash)) {\n            Events.emit('updateCell', [this.name, x, y, 'cleared'])\n            this.#attacked.set(hash, this.getValue(x, y))\n        }\n    }\n\n    allShipsSunk = () => this.#sunkShips.length === this.ships.length\n}\n\nclass Cell {\n    constructor() {\n        this.value = '_'\n    }\n}\n\nlet cat = new Gameboard()\ncat.generateShips()\n\n;// ./src/player.js\n\n\n\nclass Player {\n    constructor(name = 'player', robot = 'false') {\n        this.name = name\n        this.board = new Gameboard(this.name)\n        this.board.generateShips()\n    }\n\n    attack = (enemy, x, y) => {\n        enemy.board.receiveAttack(x, y)\n\n        if (enemy.board.isShip(x, y)) {\n            Events.emit('updateCell', [enemy.name, x, y, 'hit'])\n            if (enemy.board.allShipsSunk()) Events.emit('win', this.name)\n            Events.emit('hit')\n            return true\n        } else {\n            Events.emit('updateCell', [enemy.name, x, y, 'miss'])\n            Events.emit('miss')\n            return false\n        }\n    }\n}\n\n;// ./src/render.js\n\n\nconst $ = (id) => document.getElementById(id)\n\nfunction render(board) {\n    renderCells(board, false)\n}\n\nfunction renderAsHidden(board) {\n    renderCells(board, true)\n}\n\nfunction renderCells(board, hidden) {\n    const gameBoard = document.createElement('div')\n    gameBoard.classList.add('board')\n    $('game').appendChild(gameBoard)\n\n    if (hidden) {\n        gameBoard.classList.add('enemy')\n    } else {\n        gameBoard.classList.add('player')\n    }\n\n    board.forEach((row, rowIndex) => {\n        let rowDiv = document.createElement('div')\n        gameBoard.appendChild(rowDiv)\n        row.forEach((cell, columnIndex) => {\n            let cellDiv = document.createElement('div')\n            cellDiv.dataset.y = rowIndex\n            cellDiv.dataset.x = columnIndex\n            rowDiv.appendChild(cellDiv)\n            \n            if (hidden) {\n                cellDiv.classList.add('clickableCell')\n                cellDiv.addEventListener('click', attackEnemy)\n            } else {\n                let className = 'empty'\n                if (Number.isInteger(cell.value)) className = 'ship'\n                cellDiv.classList.add(className)\n            }\n        })\n    })\n}\n\n(function renderer() {\n    Events.on('win', (player) => {console.log(`${player} won`)})\n    Events.on('updateCell', ([name, x, y, state]) => {\n        let div = document.querySelector(`.${name} [data-x=\"${x}\"][data-y=\"${y}\"]`)\n        div.classList.add(state)\n    })\n})();\n\n(function soundBoard() {\n    Events.on('hit', () => {playSound('hit')})\n    Events.on('miss', () => {playSound('miss')})\n    Events.on('sink', () => {playSound('sink')})\n})()\n\nfunction playSound(sound) {\n    $(sound).currentTime = 0;\n    $(sound).play();\n}\n;// ./src/index.js\n\n\n\n\n\nlet user = new Player('player')\nlet robot = new Player('enemy', true)\nlet turn = 'player'\nlet memory = false\nlet win = false\nlet queue = [\n    {x: +1, y: 0, times: 1, orientation: 'x'},\n    {x: -1, y: 0, times: 1, orientation: 'x'},\n    {x: 0, y: +1, times: 1, orientation: 'y'},\n    {x: 0, y: -1, times: 1, orientation: 'y'}\n]\nEvents.on('win', () => {win = true})\n\nrender(user.board.cells)\nrenderAsHidden(robot.board.cells)\n\nfunction attackEnemy(e) {\n    let { x, y } = e.srcElement.dataset\n    x = parseInt(x)\n    y = parseInt(y)\n    let hash = x + y * 10\n\n    if (turn === 'player' && !robot.board.attackedCells.has(hash) && !win) {\n        let shipHit = user.attack(robot, x, y)\n        if (shipHit) return\n        turn = 'enemy'\n        letEnemyAttack()\n    }\n}\n\nfunction letEnemyAttack() {\n    let x\n    let y\n    if (memory) {\n        letEnemyTargetShip()\n        return\n    }\n\n    while (true) {\n            x = getRandomInt(10)\n            y = getRandomInt(10)\n            if (!user.board.attackedCells.has(x + y * 10)) break\n    }\n\n    setTimeout(() => {\n        let shipHit = robot.attack(user, x, y)\n        if (shipHit) {\n            if (win) return\n            memory = {x: x, y: y, ship: user.board.getShip(x, y), orientation: false, queue: shuffle([...queue])}\n            if (memory.ship.isSunk()) {\n                memory = false\n                Events.emit('sunk')\n                letEnemyAttack()\n            } else {\n                letEnemyTargetShip()\n            }\n            return\n        }\n        turn = 'player'\n    }, Math.random() * 500 + 500)\n}\n\nfunction letEnemyTargetShip() {\n    let direction, x, y\n    while(true) {\n        direction = memory.queue.shift()\n        x = memory.x + direction.x * direction.times\n        y = memory.y + direction.y * direction.times\n        if (user.board.isOnBoard(x, y) && !user.board.attackedCells.has(x + y * 10)) {\n            if (memory.orientation) {\n                if (memory.orientation === direction.orientation) break\n            } else {\n                break\n            }\n        }\n    }\n\n    setTimeout(() => {\n        let shipHit = robot.attack(user, x, y)\n        if (shipHit) {\n            memory.queue.push({x: direction.x, y: direction.y, times: direction.times + 1, orientation: direction.orientation})\n            if (!memory.orientation) memory.orientation = direction.orientation\n            if (win) return\n            if (memory.ship.isSunk()) {\n                memory = false\n                Events.emit('sunk')\n                letEnemyAttack()\n            } else {\n                letEnemyTargetShip()\n            }\n            return\n        }\n        turn = 'player'\n    }, Math.random() * 500 + 500)\n}\n\nlet getRandomInt = (max) => Math.floor(Math.random() * max)\n\nfunction shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = getRandomInt(i + 1);\n        [array[i], array[j]] = [array[j], array[i]]\n    }\n    return array\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///384\n")}},__webpack_require__={d:(g,I)=>{for(var C in I)__webpack_require__.o(I,C)&&!__webpack_require__.o(g,C)&&Object.defineProperty(g,C,{enumerable:!0,get:I[C]})},o:(g,I)=>Object.prototype.hasOwnProperty.call(g,I)},__webpack_exports__={};__webpack_modules__[384](0,__webpack_exports__,__webpack_require__)})();